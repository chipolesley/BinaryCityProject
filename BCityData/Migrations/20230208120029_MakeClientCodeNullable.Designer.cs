// <auto-generated />
using System;
using BCityData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BCityData.Migrations
{
    [DbContext(typeof(BCityDBContext))]
    [Migration("20230208120029_MakeClientCodeNullable")]
    partial class MakeClientCodeNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BCityData.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContactAssignmentsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfLinkedContacts")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactAssignmentsId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BCityData.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactAssignmentsId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfLinkedClients")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactAssignmentsId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("BCityData.Models.ContactAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ContactAssignments");
                });

            modelBuilder.Entity("BCityData.Models.Client", b =>
                {
                    b.HasOne("BCityData.Models.ContactAssignment", "ContactAssignments")
                        .WithMany("Clients")
                        .HasForeignKey("ContactAssignmentsId");

                    b.Navigation("ContactAssignments");
                });

            modelBuilder.Entity("BCityData.Models.Contact", b =>
                {
                    b.HasOne("BCityData.Models.ContactAssignment", "ContactAssignments")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactAssignmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactAssignments");
                });

            modelBuilder.Entity("BCityData.Models.ContactAssignment", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
